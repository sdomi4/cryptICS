from Crypto.PublicKey import RSA

# unpadded rsa is apparently so insecure it's not implemented in any library
# rolling my own implementation for the demo
def rsa_encrypt_unpadded(data: int, e, n):
    
    if len(bin(data))-2 > len(bin(n))-2:
        raise ValueError('Data too long for key')

    encrypted_number = pow(data, e, n)
    return encrypted_number

def rsa_decrypt_unpadded(data: int, n, d):
    decrypted_number = pow(data, d, n)
    return decrypted_number

def get_key():
    n = 21175524496130769993447538825866276760617718769055259782679544456066116668100564245072179621116747117468104282259089966186783881257618287861853923792216628956039420922348342919529865867238906648622166771732677286898012881267583687548106613561792944657437401452386535131748765862959861813790088837608970385557115178944337515611227323925461131809301252798847824421690612236787562574260901895533505699241642749700157813424019154688864705902371869403877604221700879190535842661497008870957755450494008272121590392147283932045380234770022232786625392433208614484575540211009232810494119759661492734441725077748628398048829
    e = 65537
    d = 3994421801172111082960696991543278551858286895684050979803406752492750161121095342778961816470936817976096543775699218868488269710961839627876911254425409699391753378282975866192959195320826150778820158315840257553392499575362060169270305478701577404024747477838908411526986556919622376260432629734972555830236894967306397304225064235270787640979013940991556096222713828189074334139235983106479493150461965953487776544856872857394079039566899038195200078259184926124177426181367158535946697368184404839483054292119332299759374010100392699484613575887607113656850877692729354040965332054755920647215437802521917341873
    p = 139621547128132549067872317002139765253400110446055170533623253483680959779599246717046106326363868404283411796173919387297600896997227911362395498540863004046842962118309242121388712310903412901645603670840388863832677812276284153005607564954467683367579560396521179192649615390162908615448271974686028683557
    q = 151663729071113284444747075642683884141552453759616621984249152523103888577714489071315282088033108782731557428024416174769470383243530287969297497366511433938931672713521916482850968280682101689898201690386946139741280355121120617755427341625543573080232766176035904241187437143116376163461182132779263453497

    return {
        'n': n,
        'e': e,
        'd': d,
        'p': p,
        'q': q
    }