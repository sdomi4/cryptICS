{
    "pagetitle": "RSA",
    "homomorphictitle": "Homomorphic encryption",
    "hide": "Hide",
    "show": "Show",
    "back": "Back",
    "forward": "Next",
    "steps": [
        "To show the principle of the multiplicative homomorphic property of RSA, a somewhat nonsensical scenario is constructed. To experiment without the scenario, simply hide this field.<br><br><b>Scenario:</b><br>The owner of a company wants to multiply the salary of their employees. However, they neither want anyone else to see all the salaries, nor do they want to handle the adjustment themselves.<br><br>The initial value (in the scenario, the hourly wage) can be adjusted.",
        "To ensure that no one can see the salary, the owner encrypts the salary with their public key.<br><br><b>Additional Information:</b><br>The multiplicative homomorphic property of RSA is only present in the textbook version without padding; however, this is insecure. In the representation, the ciphertext is shown as hex encoded and truncated as it is too large to display completely. In the representation, to conserve resources, a fixed 2048-bit RSA key is used.",
        "The owner decides by what factor the salary should be increased. The factor can also be adjusted.<br><br><b>Additional Information:</b><br>If the factor becomes too large, there can be an overflow of the ciphertext if the modulus chosen as part of the RSA key is smaller than the result. This shouldn't happen in the scenario, the modulus is 617 digits long.",
        "The owner also encrypts the chosen factor with their public key, so it cannot be seen either.",
        "Now the staff can calculate the salary increase by multiplying the ciphertext of the salary and the factor without knowing the actual salary or factor.",
        "The owner can decrypt the result of the calculation and obtain the multiplied salary, without anyone else needing to know the original numbers, and without having to perform the calculation themselves."
    ]
}